#!/bin/bash
if [ "$#" -lt 1 ]; then
	echo "Usage: ./nameit.sh <initial letter> [-a|--all]"
	exit 1
fi

list='QWFyZHdvbGYKQWJvbWluYXRpb24KQWJvbWluYXRyaXgKQWJyYXhhcwpBYnNhbG9tCkFieXNzCkFj
Y2VzcwpBY2hlYmUKQWNoZWxvdXMKQWNoaWxsZXMKQWNyb2JhdApBZGFwdG9pZApBZG1pbmlzdHJh
dG9yCkFkb25pcwpBZHJlbmF6b24KQWR2ZXJzYXJ5CkFkdmlzb3IKQWVnaXMKQWVybwpBZnRlcnNo
b2NrCkFnYW1lbW5vbgpBZ2Ftb3R0bwpBZ2VudApBZ2luYXIKQWdnYW1vbgpBZ29uCkFncm9uCkFn
b255CkFndWphCkFoYWIKQWh1cmEKQWlyLVdhbGtlcgpBaXJib3JuZQpBaXJlbwpBaXJzdHJpa2UK
QWphawpBamF4CkFqYXhpcwpBa2FzaGEKQWtoZW5hdGVuCkEnbGFycwpBbGFyaXMKQWxiZXJ0CkFs
YmlubwpBbGJpb24KQWxjaGVteQpBbGNtZW5hCkFsZGVicm9uCkFsZXgKQWxpYmFyCkFsa2hlbWEK
QWxsLUFtZXJpY2FuCkFsbGF0b3UKQW1hbGdhbQpBbWF0c3UtTWlrYWJvc2hpCkFtYXpvbgpBbWVy
Z2luCkFtZXJpY29wCkFtZXJpZHJvaWQKQW1pbmVkaQpBbW1vCkFtcGhpYmlhbgpBbXBoaWJpb24K
QW1waGliaXVzCkFtdW4KQW5hY29uZGEKQW5haXMKQW5hbHl6ZXIKQW5hcmNoaXN0CkFuZHJvbWVk
YQpBbmVsbGUKQW5nZWwKQW5nbGVyCkFuaS1NYXRvcgpBbmltdXMKQW5raGkKQW5uYWxlZQpBbmVs
bGUKQW5uZXgKQW5uaWhpbHVzCkFub2xlCkFub21hbGl0bwpBbm9tYWxvY28KQW5vbWFseQpBbnN3
ZXIKQW50LU1hbgpBbnRocm9wb21vcnBobwpBbnRpLUNhcApBbnRpLVZlbm9tCkFudGktVmlzaW9u
CkFudGltYXR0ZXIKQW50b25pbwpBbnl0aGluZwpBbnViaXMKQW52aWwKQXBhbGxhCkFwZQpBcGUt
TWFuCkFwZS1YCkFwb2NhbHlwc2UKQXBvbGxvCkFwcnlsbApBcXVhcmlhbgpBcXVhcml1cwpBcXVl
ZHVjdApBcmFjaG5lCkFyYWdvcm4KQXJha2kKQXJhbHVuZQpBcmHDsWEKQXJjCkFyY2FkZQpBcmNh
ZGVtYW4KQXJjYW5uYQpBcmNoYW5nZWwKQXJjaGVuZW15CkFyY2hlcgpBcmNoaW1hZ2UKQXJjaGl0
ZWN0CkFyY2xpZ2h0CkFyZGluYQpBcmRyb21hbgpBcmVuYQpBcmVzCkFyZ28KQXJndXMKQXJpYW5u
CkFyaWRlcwpBcmllbApBcmllcwpBcml6ZQpBcmtvbgpBcmt1cwpBcmxvawpBcm1hZGlsbG8KQXJt
YWdlZGRvbgpBcm1vcgpBcm1vcnkKQXJyYW5nZXIKQXJzZW5hbApBcnNlbmljCkFydGVtaXMKQXJ0
aWUKQXNoY2FuCkFzbW9kZXVzCkFzcApBc3Nhc3NpbgpBc3RyYQpBc3Ryb24KQXN0cm9ub21lcgpB
c3lsdW0KQXRhbGFudGEKQXRhbG9uCkF0bGFzCkF0aGVuYQpBdGxlemEKQXRvbS1TbWFzaGVyCkF0
dC1MYXNzCkF0dHVtYQpBdHVtCkF1cmljCkF1cm9yYQpBdXRob3JpdHkKQXV0b2x5Y3VzCkF2YWxh
bmNoZQpBdmFycmlzaApBeHVtCkF6YXplbApCYWFsCkJhbGRlcgpCYWx0aGFrawpCYWxvcgpCYW5k
aXQKQmFudGFtCkJhbnNoZWUKQmFwaG9tZXQKQmFyYmFydXMKQmFybmFjbGUKQmFycmFjdWRhCkJh
c2UKQmFzaWxpc2sKQmFzdApCYXN0aW9uCkJhdHJhZ29uCkJhdHRsZXN0YXIKQmF0dGxlYXhlCkJh
dHRsZXRpZGUKQmF0d2luZwpCZWFzdApCZWRsYW0KQmVldGxlCkJlaGVtb3RoCkJlbGEKQmVsYXNj
bwpCZWxhdGhhdXplcgpCZW5nYWwKQmVyZWV0CkJlcnplcmtlcgpCZXMKQmV2YXRyb24KQmV5b25k
ZXIKQmktQmVhc3QKQmluYXJ5CkJpcmQtQnJhaW4KQmlyZC1NYW4KQmlzaG9wCkJpc29uCkJpemFy
bmFnZQpCbGFja2JpcmQKQmxhY2toZWFydApCbGFja2hlYXRoCkJsYWNrbGFzaApCbGFja291dApC
bGFja3dpbmcKQmxhY2t3dWxmCkJsYWRlCkJsYXF1ZXNtaXRoCkJyYXNzCkJsYXN0YWFyCkJsYXpl
CkJsaW5kc2lkZQpCbGluZHNwb3QKQmxpbmcKQmxpbmsKQmxpc3RpawpCbGl0emlhbmEKQmxpdHpr
cmllZ2VyCkJsaXp6YXJkCkJsb2IKQmxvY2tidXN0ZXIKQmxva2UKQmxvb2RheGUKQmxvb2RoYXdr
CkJsb29kbHVzdApCbG9vZHNjcmVhbQpCbG9vZHNoZWQKQmxvb2RzcG9ydApCbG9vZHN0b3JtCkJs
b29kdGlkZQpCbG9vZHdyYWl0aApCbG93aGFyZApCbHVyCkJvYgpCb2JzdGVyCkJvZ2V5bWFuCkJv
bWJzaGVsbApCb25leWFyZApCb29ieXRyYXAKQm9vawpCb29tZXIKQm9vbWVyYW5nCkJvb21zbGFu
ZwpCb29zdApCb3JhCkJvdW50eQpCb3ZhCkJveApCcmFpbi1DaGlsZApCcmFpbmNoaWxkCkJyYXNz
CkJyZXMKQnJpZ2FkZQpCcmlxdWV0dGUKQnJ1aXNlcgpCcnVubmhpbGRhCkJydXRhY3VzCkJyeW5v
Y2tpCkJ1Y2t5CkJ1ZwpCdWxsZXQKQnVsbHNleWUKQnVsbGRvemVyCkJ1cm5lcgpCdXJzdGFycgpC
dXNobWFuCkJ1c2htYXN0ZXIKQnVzaHdhY2tlcgpCdXR0ZXJiYWxsCkJ1enoKQnV6emFyZApCeXJy
YWgKQ2FiZXIKQ2FibGUKQ2FkYXZlcgpDYWllcmEKQ2FpbWFuCkNhZ2xpb3N0cm8KQ2FpbgpDYWxp
YmFuCkNhbGxpc3RvCkNhbHlwc28KQ2FuYXN0YQpDYW5jZXIKQ2FuZHJhCkNhbm5vbmJhbGwKQ2Fw
cmljZQpDYXByaWNvcm4KQ2FyZWdpdmVyCkNhcmV0YWtlcgpDYXJkaWFjCkNhcmRpbmFsCkNhcm5h
Z2UKQ2Fybml2b3JlCkNhcnJpb24KQ2Fzc2lvcGVhCkNhdApDYXQtTWFuCkNhdGlhbmEKQ2F5bWFu
CkNlbnRlbm5pYWwKQ2VudHVyaW9uCkNlbnR1cmlvdXPigI4KQ2VudHVyaXVzCkNlcmJlcnVzCkNl
cmVicmEKQ2VyaXNlCkNldGhsYW5uCkNoJ29kCkNoYWthCkNoYWxsZW5nZXIKQ2hhbWJlcgpDaGFt
ZWxlb24KQ2hhbmNlCkNoYW5nZWxpbmcKQ2hhb3MKQ2hhcmNvYWwKQ2hhcmxpZS0yNwpDaGFyb24K
Q2hlZXRhaApDaGVtaXN0cm8KQ2hpbWVyYQpDaG9pY2UKQ2hyb21lCkNocm9ub3MKQ2h0aG9uCkNo
dHlsb2sKQ2xlYQpDbGVhcmN1dApDbGl2ZQpDbG9hawpDbG91ZApDbG93bgpDb2FjaApDb2FjaHdo
aXAKQ29icmEKQ29sZGJsb29kCkNvbGRmaXJlCkNvbGxlY3RvcgpDb2xvbmVsCkNvbG9zc3VzCkNv
bWV0CkNvbW1hbmRvCkNvbmRvcgpDb25xdWVzdApDb25xdWlzdGFkb3IKQ29uc3RyaWN0b3IKQ29u
dGVtcGxhdG9yCkNvbnRlc3NhCkNvbnRyYXJ5CkNvbnRyb2xsZXIKQ29wcGVyaGVhZApDb3B5Y2F0
CkNvcmFsCkNvcm9uYQpDb3JydXB0b3IKQ29yc2FpcgpDb3R0b25tb3V0aApDb3VyaWVyCkNvd2dp
cmwKQ3JpbWUtQnVzdGVyCkNyaW1lYnVzdGVyCkNyaW1zb24KQ3JpcHBsZXIKQ3Jvc3Nib25lcwpD
cm9zc2ZpcmUKQ3Jvd24KQ3J1Y2libGUKQ3J1c2FkZXIKQ3J1c2hlcgpDcnlzdGFsCkN1dHRocm9h
dApDeWJlbGUKQ3liZWxsZQpDeWJlcgpDeWNsb25lCkN5Y2xvcHMKQ3lwaGVyCkQnS2VuCkQnU3Bh
eXJlCkRhZ2dlcgpEYW1iYWxsYWgKRGFuZ2VyCkRhcmVkZXZpbApEYXJrLUNyYXdsZXIKRGFya3N0
YXIKRGFya2RldmlsCkRhcmtoYXdrCkRhcmtvdGgKRGF5dHJpcHBlcgpEYXp6bGVyCkRlYWRoZWFk
CkRlYWRwb29sCkRlYXRoCkRlYXRoJ3MtSGVhZApEZWF0aGJpcmQKRGVhdGhsb2sKRGVhdGh3YXRj
aApEZWF0aC1TdGFsa2VyCkRlYXRodXJnZQpEZWF0aHN0cm9rZQpEZWNheQpEZWZlbnNvcgpEZWxp
bGFoCkRlbHBoaQpEZW1lbnRpYQpEZW1pdXJnZQpEZW1vZ29ibGluCkRlc3RpbnkKRGVzdHJveWVy
CkRldmFzdGF0b3IKRGV2aWwtU2xheWVyCkRpYWJsbwpEaWFtb25kYmFjawpEaWFtb25kaGVhZApE
aWdpdGVrCkRpb255c3VzCkRpcnRuYXAKRGlzY3VzCkRpdHRvbWFzdGVy4oCOCkRKCkQtTWFuCkRv
bWluYQpEb21pbm8KRG9taW51cwpEb21vCkRvb3JtYW4KRG9vcApEb3BwZWxnYW5nZXIKRG9wcGxl
Z2FuZ2VyCkRvcm1hCkRvcm1hbW11CkRvdWdib3kKRG91Z2hib3kKRG91Z2xvY2sKRHJhY3VsYQpE
cmFnb25mbHkKRHJhZ29uZXNzCkRyYWdvbndpbmcKRHJlYWRrbmlnaHQKRHJlYWRub3VnaHQKRHJl
YW1xdWVlbgpEcm9tZWRhbgpEcnVpZApEcnVpZwpEdXNrCkR1c3QKRHdlbGxlci1pbi1EYXJrbmVz
cwpEeW5hLU1pdGUKRWFydGhxdWFrZQpFY3N0YXN5CkVjaG8KRWN0b2tpZApFZWwKRWdnaGVhZApF
bGF0aGFuCkVsZWN0cm8KRWxlY3Ryb0N1dGUKRWxlY3Ryb24KRWxlZ2d1YQpFbGVrdHJhCkVsZWt0
cm8KRWxmcXVlZW4KRWxpbWluYXRvcgpFbGl4aXIKRWxzaWUtRGVlCkVsdmVuCkVseXNpdXMKRW1w
YXRoCkVtcGF0aG9pZApFbXBsYXRlCkVuY2hhbnRyZXNzCkVuZXJnaXplcgpFbmZvcmNlcgpFbmln
bWEKRW50CkVvbgpFcG9jaApFcXVpbGlicml1cwpFcXVpbm94CkVyZXNoa2lnYWwKRXJnCkVybnN0
CkVyb3MKRXNodQpFdGVybml0eQpFdmVyCkV2ZXJ5bWFuCkV2aWxoYXdr4oCOCkV4ZWN1dGlvbmVy
CkV4b2R1cwpFeHRlcm1pbmF0b3IKRXpla2llbApGYWZuaXIKRmFnaW4KRmFsY29uCkZhbWluZQpG
YW5kcmFsCkZhbmcKRmFudGFzaWEKRmFudG9tZXgKRmFyYWxsYWgKRmFzYXVkCkZhc2hpbWEKRmF0
YWxlCkZhdGViYWxsCkZlYXJtYXN0ZXLigI4KRmVlZGJhY2sKRmVsaW5lCkZlbnJpcwpGZXJhbApG
ZXItZGUtTGFuY2UKRmVyb24KRmlnaHQtTWFuCkZpbgpGaXJlYXJtCkZpcmViaXJkCkZpcmVib2x0
CkZpcmVicmFuZApGaXJlZnJvc3QKRmlyZWxvcmQKRmlyZXBvd2VyCkZpcmVzdGFyCkZpeHgKRml4
ZXIKRmxhZy1TbWFzaGVyCkZsYW1iZQpGbGF0bWFuCkZsZXgKRmx1YmJlcgpGbHkKRmx5Z2lybApG
b250YW5lbGxlCkZvb2xraWxsZXIKRm9yY2UKRm9yZWFybQpGb3JlaWduZXIKRm9yZ2UKRm94Zmly
ZQpGcmVhawpGcmVha21hc3RlcgpGcmVha3Nob3cKRnJlbnp5CkZyZXkKRnJpZ2dhCkZyb2ctTWFu
CkZ1cnkKRnVzaW9uCkZ1dHVyaXN0CkctRm9yY2UKR2FlYQpHYWlhCkdhbGFjdHVzCkdhbWJpdApH
YW1vcmEKR2FueW1lZGUKR2FyZGVuZXIKR2FyZ2FudHVhCkdhcmdhbnR1cwpHYXJnb3VpbGxlCkdh
cmdveWxlCkdhdGVjcmFzaGVyCkdhdGV3YXkKR2F1bnRsZXQKR2F2ZWwKR2F6YQpHYXplbGxlCkdh
emVyCkdlYgpHZWUKR2VpZ2VyCkdlaXJyb2R1cgpHZW1pbmkKR2VuaXMtVmVsbApHaGF1cgpHaG9z
dApHaG91bApHaWFudC1NYW4KR2liYm9uCkdpYmJvcmltCkdpZGVvbgpHaWdhbnRvCkdpZ2FudHVz
CkdsYWRpYXRvcgpHbGFkaWF0cml4CkdsYW1vcgpHbGl0Y2gKR2xvYgpHb2cKR2xvb20KR2xvcmlh
bgpHb2JseW4KR29sZGJ1ZwpHb2xkZW5leWUKR29sZW0KR29saWF0aApHb21pCkdvb2dhbQpHb3Jn
aWxsYQpHb3Jnb24KR29yaWxsYS1NYW4KR29ycgpHb3NhbXlyCkdyYW5kbWFzdGVyCkdyYXBwbGVy
CkdyYXZpdG9uCkdyYXZpdHkKR3JlbWxpbgpHcmVuYWRlCkdyaWZmaW4KR3JpenpseQpHcm9uawpH
cm90ZXNrCkdyb3VuZGhvZwpHdWFyZHNtYW4KSGFjawpIYWcKSGFpcmJhZwpIYWxmbGlmZQpIYW1t
ZXJoZWFkCkhhbmdtYW4KSGFyZGNhc2UKSGFyZGNvcmUKSGFyZG5vc2UKSGFyZHNoZWxsCkhhcmR3
aXJlCkhhcm1vbmljYQpIYXJuZXNzCkhhcnBvb24KSGFycHkKSGFycmllcgpIYXRlLU1vbmdlcgpI
YXZlbgpIYXZvawpIYXdrZXllCkhhd2tzaGF3CkhhemFyZApIYXl3aXJlCkhhem1hdApIZWFka25v
Y2tlcgpIZWFkbG9rCkhlYmUKSGVjYXRlCkhlY3RvcgpIZWltZGFsbApIZWxhCkhlbGlvCkhlbGxj
YXQKSGVsbGV5ZXMKSGVsbGZpcmUKSGVsbGlvbgpIZWxscmF6b3IKSGVwaGFlc3R1cwpIZXB6aWJh
aApIZXIKSGVyYQpILkUuUi5CLkkuRS4KSGVyY3VsZXMKSGVybWVzCkhlcm1vZApIZXJvCkhpZ2gt
VGVjaApIaWphY2tlcgpIaWxkZWdhcmRlCkhpbQpIaXQtTWFrZXIKSGl0bWFuCkhvYmdvYmxpbgpI
b2RlcgpIb2d1bgpIb2xvY2F1c3QKSG9sbHkKSG9uY2hvCkhvb2QKSG9ybmV0CkhvcnVzCkhyaW1o
YXJpCkh1YgpIdWxrCkh1bGtsaW5nCkh1bWJ1ZwpIdW50YXJhCkh1cnJpY2FuZQpIdXNrCkh1c3Nh
cgpIeWJyaWQKSHlkZQpIeWRybwpIeWRyby1NYW4KSHlkcm9uCkh5cGVyaW9uCkh5cGVya2luZApI
eXBlcnN0b3JtCkh5cG5vdGlhCkh5cHBva3JpCkhpcHBvbHl0YQpJY2FydXMKSWNlbWFuCkljZW1h
c3RlcgpJZHVubgpJZ3VhbmEKSWthcmlzCklrb25uCklrdGhhbG9uCklsbHVzaW9uCkltbW9ydHVz
CkltcGFsYQpJbXB1bHNlCkluLUJldHdlZW5lcgpJbmRyYQpJbmRlY2gKSW5lcnRpYQpJbmZhbW5p
YQpJbmZlY3RpYQpJbmZlcm5vCkluZmluaXR5CkludGVybG9wZXIKSW56YQpJb24KSXJpZGlhCkly
b25jbGFkCklTQUFDCklzYmlzYQpJc2lzCkoyCkphY2thbApKYWNrZGF3CkphY2toYW1tZXIKSmFj
ay1pbi10aGUtQm94CkphY2twb3QKSmFlZ2VyCkphZ3VhcgpKYW5uCkphbnVzCkphcmVsbGEKSmFy
ZW4KSmFzb24KSmF6egpKZWt5bGwKSmVzdGVyCkppZ3NhdwpKb2Nhc3RhCkpvbHQKSm9zZXBoCkpv
eXN0aWNrCkp1YmlsZWUKSnVnZ2VybmF1dApKdW5rcGlsZQpKdW50YQpKdXN0aWNlCkthaW5lCkth
bGEKS2FsdXUKS2FtYWwKS2FtdXUKS2FuZ2Fyb28KS2Fya2FzCkthcm1hCkthcm5hawpLYXJuaWxs
YQpLYXR1CkthLVphcgpLZXkKS2hhb3MKS2hvbnNodQpLaG9yeXBob3MKS2ljay1Bc3MKS2llcnJv
awpLaWxscG93ZXIKS2lsbHJhdmVuCktpbG1lcgpLaW11cmEKS2luZ3BpbgpLaXJpZ2kKS2lzbWV0
Cktpc3MKS2thbGxha2t1CktsJ3J0CktsYWF0dQpLbGF3CktsZWluc3RvY2tzCktuaWNra25hY2sK
S29nYXIKS29yZwpLb3Jtb2sKS29ycmVrCktvcnZhYwpLb3J2dXMKS29zbW9zCktyYWtlbgpLcmFr
a2FuCktyYW5nCktybwpLcnlzdGFsaW4KS3ViaWsKS3VrdWxjYW4KS3Vyc2UKS3dhbm5vbgpLeWx1
bgpLeW1hZXJhCkxhY3VuYQpMYW5jZXIKTGFuZHNsaWRlCkxhbWVudApMYXNoZXIKTGF6YXJ1cwpM
ZWFkZXIKTGVhcC1Gcm9nCkxlYXNoCkxlZWNoCkxlZnQtV2luZ2VyCkxlZ2FjeQpMZWdpb24KTGVp
cgpMZW8KTGVvbnVzCkxldGhhCkxldmFuCkxpYW5kYQpMaWJyYQpMaWZlZm9yY2UKTGlmZWd1YXJk
CkxpZnRlcgpMaWdodGJyaWdodApMaWdodG1hc3RlcgpMaWdodHNwZWVkCkxpbmsKTGlvbmhlYXJ0
CkxpemFyZApMbG9pZ29yb3RoCkxseXJhCkxseXJvbgpMb2EKTG9ja2Rvd24KTG9ja2hlZWQKTG9j
a2phdwpMb2Nrc21pdGgKTG9jdXMKTG9jdXN0CkxvZGVzdG9uZQpMb2dhbgpMb2tpCkxvbmduZWNr
CkxvbmdzaG90Ckxvb3RlcgpMb3JlbGVpCkxvcnZleApMb3NzCkx1Y2lmZXIKTHVkaQpMdW5hCkx1
bmF0aWNhCkx1bmF0aWsKTHVwYQpMdXBvCkx5amEKTHlueApNCk1hY2gtSVYKTWFjaGluZXNtaXRo
Ck1hZC1Eb2cKTWFkY2FwCk1hZWxzdHJvbQpNYWVzdHJvCk1hZ2RhbGVuYQpNYWdkYWxlbmUKTWFn
Z290dApNYWdpY2lhbgpNYWdpawpNYWdpbGxhCk1hZ21hCk1hZ25ldG8KTWFnbnVzCk1hZ3VzCk1h
aGtpem1vCk1ha2thcmkKTWFsaWNlCk1hbW1vbWF4Ck1hbi1BcGUKTWFuLUJlYXN0Ck1hbi1CcnV0
ZQpNYW4tQnVsbApNYW4tRWF0ZXIKTWFuLUVsZXBoYW50Ck1hbi1LaWxsZXIKTWFuLVNwaWRlcgpN
YW4tVGhpbmcKTWFuLVdvbGYKTWFuYm90Ck1hbmRhcmluCk1hbmRyaWxsCk1hbmRyb2lkCk1hbmds
ZQpNYW5nb2cKTWFuaWtpbgpNYW5zbGF1Z2h0ZXIKTWFudGEKTWFudGlzCk1hbnRyYQpNYXJyaW5h
Ck1hcnJvdwpNYXJ0aW5leApNYXItVmVsbApNYXNxdWUKTWFzdGVyCk1hc3Rlcm1pbmQKTWF0YWRv
cgpNYXRjaApNYXVsZXIKTWF1ci1Lb25uCk1hdXZhaXMKTWF2ZXJpY2sKTWF4Ck1heGFtCk1heGlt
dXMKTWF5aGVtCk1lYW5zdHJlYWsKTWVhdGhvb2sKTWVjaGFtYWdlCk1lZHVzYQpNZWthbm8KTWVn
Z2FuCk1lbGQKTWVsZWUKTWVsdGRvd24KTWVsdGVyCk1lbnRhbGxvCk1lbnRvcgpNZW50dXMKTWVw
aGlzdG8KTWVyY3VyaW8KTWVyY3VyeQpNZXJjeQpNZXJsaW4KTWVzbWVybwpNZXRhbGhlYWQKTWV0
ZW9yaXRlCk1pY3JvCk1pY3JvY2hpcApNaWNyb21heApNaWRhcwpNaWRuaWdodApNaWVrCk1pa2V5
Ck1pbGFuCk1pbWljCk1pbWlyCk1pbmRtZWxkCk1pbmR3b3JtCk1pc2ZpdApNb2NraW5nYmlyZApN
T0RBTQpNT0RPSwpNb2pvCk1vbmRvCk1vbmdvb3NlCk1vbnNvb24KTW9uc3RyYQpNb29uLUJveQpN
b29uZGFyawpNb29uZHJhZ29uCk1vb25odW50ZXIKTW9vbnN0b25lCk1vcmJpdXMKTW9yZHJlZApN
b3JnCk1vcmx1bgpNb3JwaApNb3JwaGV1cwpNb3Rvcm1vdXRoCk1vdW50am95Ck0tVHdpbnMKTXVy
bXVyCk15cy1UZWNoCk15c3RlcmlvCk15c3RpcXVlCk4nYXN0aXJoCk4nR2FidGhvdGgKTidHYXJh
aQpOYWdhCk5hbW9yYQpOYW1vcml0YQpOYW5ueQpOYXRpdmUKTmVidWxhCk5lYnVsbwpOZWJ1bG9u
Ck5lYnVsb3MKTmVjcm9kYW11cwpOZWNyb21hbnRyYQpOZWVkbGUKTmVmYXJpdXMKTmVrcmEKTmVt
ZXNpcwpOZW9waHl0ZQpOZXB0dW5lCk5ldHdvcmsKTmV1cm9ubmUKTmV1cm90YXAKTmlnaHRjcmF3
bGVyCk5pZ2h0aGF3awpOaWdodG1hcmUKTmlnaHRzaGFkZQpOaWdodHNpZGUKTmlnaHR3YXRjaApO
aWdodHdpbmQKTmlra2kKTmltcm9kCk5pbmdhbApOaXRybwpOb2JpbHVzCk5vY3R1cm5lCk5vaC1W
YXJyCk5vbWFkCk5vcm5zCk5vcnRoc3RhcgpOb3NmZXJhdGEKTm92YQpOb3ZhLVByaW1lCk5vdnMK
Tm94Ck51a2xvCk51bWludXMKTnV0Ck9iaXR1YXJ5Ck9ibGl0ZXJhdG9yCk9ibGl2aW9uCk9jY3Vs
dXMKT2NlYW4KT2NlbG90Ck9kZGJhbGwKT2RpbgpPZ3JlCk9ncmVzcwpPbWVuCk9tZXJ0YQpPbnNs
YXVnaHQKT255eHgKT296ZQpPcHRvbWFuCk9yYWNsZQpPcmF0b3IKT3JiCk9yYml0Ck9yY2hpZApP
cmQKT3JkZXIKT3Jpa2FsCk9ya2EKT3JwaGFuCk9ycGhhbi1NYWtlcgpPc2lyaXMKT3V0bGF3Ck91
dHJhZ2UKT3ZlcmtpbGwKT3Zlcm1pbmQKT3ZlcnJpZGVyCk96b25lCk93bApPeApPenltYW5kaWFz
ClBhaWJvClBhbGFkaW4KUGFyYWRpZ20KUGFyYWdvbgpQYXJhbHl6ZXIKUGFyaXMKUGFzY28KUGF0
Y2gKUGF0aHdheQpQYXliYWNrClBlZXBlcnMKUGVuYW5jZQpQZXJlZ3JpbmUKUGVyZmVjdGlvbgpQ
ZXJzZXVzClBlcnN1YWRlcgpQZXJzdWFzaW9uClBlcnVuClBoYWRlClBoYW50YXppYQpQaGFsYW54
ClBoYWdlClBoYXN0b3MKUGhhdApQaG9lbml4ClBob3RvbgpQaHlsYS1WZWxsClBpbGVkcml2ZXIK
UGlwZWxpbmUKUGlwZXIKUGlyYW5oYQpQaXNjZXMKUGlzdG9sClBpeGllClBpeHgKUGxhZ3VlClBs
YW50bWFuClBsYXNtYQpQbGF6bQpQbHVnClBsdW5kZXJlcgpQbHV0bwpQb2lzb24KUG9sYXJpcwpQ
b2x0ZXJnZWlzdApQb3JjdXBpbmUKUG9ydGFsClBvc3Nlc3NvcgpQb3N0bWFuClBvc3Rtb3J0ZW0K
UG91bmRjYWtlcwpQb3dkZXJrZWcKUG93ZXJwYXgKUG93ZXJob3VzZQpQcmVzZW5jZQpQcmVzc3Vy
ZQpQcmV2aWV3ClByaW1hbApQcmltZQpQcmltZXZpbApQcmltdXMKUHJvY3RvcgpQcm9kaWd5ClBy
b2plY3RvcgpQcm9tZXRoZXVzClByb3RlY3RvcgpQcm90ZXVzClByb3RvdHlwZQpQcm93bGVyClBz
aS1Mb3JkClBzeWNoZQpQc3ljaG8tTWFuClBzeWtsb3AKUHN5bG9ja2UKUHVjawpQdWlzaGFubnQK
UHVsc2UKUHVtYQpQdW5jaG91dApQdW5pc2hlcgpQdXJnZQpQeXJlClB5cm8KUXVhZ21pcmUKUXVh
bnR1bQpRdWFzYXIKUXVhc2ltb2RvClF1aWNrc2FuZApRdWlja3NpbHZlcgpSYWRpYW4KUmFkaXVz
ClJhZmZlcnR5ClJhZ2UKUmFnZ2Fkb3JyClJhaW5ib3cKUmFtYS1UdXQKUmFtYW4KUmFtcm9kClJh
bXNob3QKUmFuY29yClJhbmRvbQpSYW5nZXIKUmF0dGxlcgpSYXgKUmF6YQpSYXpvcmJhY2sKUmVi
ZWwKUmVhcGVyClJlY29yZGVyClJlZG5lY2sKUmVkZWVtZXIKUmVkd2luZwpSZWlnbmZpcmUKUmVq
ZWN0ClJlbW5hbnQKUmVwdHlsClJldmFuY2hlClJoaWFubm9uClJoaW5vClJpY2Fkb25uYQpSaWNv
Y2hldApSaWN0b3IKUmlnaHQtV2luZ2VyClJpbmdlcgpSaW5nbGVhZGVyClJpbmdtYXN0ZXIKUmlu
dHJhaApSaW90ClJpcGZpcmUKUmwnbm5kClJvY2sKUm9kc3R2b3cKUm9ndWUKUm9tYQpSb3NlClJv
dWdoaG91c2UKUm91bGV0dGUKUnVja3VzClJ1bmUKUnVubmVyClJ1c2gKUnlkZXIKUydieWxsClNh
YnJhClNhYnJlY2xhdwpTYWJyZXRvb3RoClNhY2sKU2FnZQpTYWdpdHRhcml1cwpTYWx2bwpTYW5k
bWFuClNhbmdyZQpTYXNxdWF0Y2gKU2F0YW5hClNhdGFubmlzaApTYXR1cm55bmUKU2F1cm9uClNh
eWdlClNjYWxlZmFjZQpTY2FscGh1bnRlcgpTY2FubmVyClNjYXJlY3JvdwpTY2hlbWVyClNjaW1p
dGFyClNjaW50aWxsYQpTY29yY2hlcgpTY29ycGlhClNjb3JwaW8KU2NvcnBpb24KU2NyYW1ibGVy
ClNjcmVhbQpTY3JlZWNoClNjcmllcgpTZWVrZXIKU2VraG1ldApTZWxlbmUKU2VudHJ5ClNlcHVs
Y2hyZQpTZXJwZW50aW5hClNlcnNpClNldApTZXRoClNoYWRvdy1IdW50ZXIKU2hhZG93Y2F0ClNo
YWRvd21hZ2UKU2hhZHJhYwpTaGFsbGEtQmFsClNoYW1hbgpTaGFtcm9jawpTaGFuZy1DaGkKU2hh
bmdhClNoYXJkClNoYXRocmEKU2hhdHRlcgpTaGF0dGVyZmlzdApTaGF0dGVyc3RhcgpTaGUtSHVs
awpTaGUtVGhpbmcKU2hlLVZlbm9tClNoZWxsc2hvY2sKU2hyaWtlcgpTaGl2YQpTaG9ja2VyClNo
b2Nrd2F2ZQpTaG90Z3VuClNocmllawpTaHJvdWQKU2h1bWEtR29yYXRoClNpZGV3aW5kZXIKU2ll
Z2UKU2lmClNpZ21hcgpTaWd5bgpTaWtvcnNreQpTaWxob3VldHRlClNpbHZlcgpTaWx2ZXJjbGF3
ClNpbHZlcm1hbmUKU2luClNpbi1FYXRlcgpTaW5pc3RlcgpTaXJ5bgpTaXNlLU5lZwpTa2VpbgpT
a2lkcwpTa2luClNraW5oZWFkClNrdWxsZmlyZQpTa3VsbGNydXNoZXIKU2t5aGF3awpTa3l3YWxr
ZXIKU2xhYgpTbGFwc3RpY2sKU2xlZWsKU2xlZXBlcgpTbGVlcHdhbGtlcgpTbGljawpTbGlwc3Ry
ZWFtClNsaWdndXRoClNsaXRoZXIKU2x1ZGdlClNsdWcKU2x1Z2dvClNsdWsKU2x5ZGUKU21hc2hl
cgpTbm93YmlyZApTbm93ZmFsbApTb2xhcmEKU29sYXJtYW4KU29sYXJyClNvbG8KU29saXRhaXJl
ClNvbG8KU29uZ2JpcmQKU291bGZpcmUKU3BlY3RyYQpTcGVjdHJhbApTcGVjaWFsaXN0ClNwZWVk
ClNwZWVkYmFsbApTcGVlZG8KU3BlbGxiaW5kZXIKU3BlbGxjaGVjawpTcGhpbngKU3BoaW54b3IK
U3BpZGVyLUdpcmwKU3BpZGVyLUhhbQpTcGlkZXItTWFuClNwaWRlci1TbGF5ZXIKU3BpZGVyLVdv
bWFuClNwaWRlcmNpZGUKU3Bpa2UKU3Bpbm5lcmV0dGUKU3BpcmFsClNwaXRmaXJlClNwb2lsc3Bv
cnQKU3Bvb3IKU3BvdApTcHJpdGUKU3B1dG5pawpTcHlkZXIKU3B5bWFzdGVyClNweW5lClNxdWlk
Ym95ClN0YWthcgpTdGFsbGlvcgpTdGFyLURhbmNlcgpTdGFyLUxvcmQKU3RhcmJvbHQKU3RhcmR1
c3QKU3RhcmZveApTdGFyaGF3awpTdGFybGlnaHQKU3RhcnNoaW5lClN0YXJzdHJlYWsKU3RhdHVy
ZQpTdGVncm9uClN0ZWxsYXJpcwpTdGVudG9yClN0aWNrClN0aWxldHRvClN0aWx0LU1hbgpTdGlu
Z2VyClN0aW5ncmF5ClN0aXRjaApTdG9uZQpTdG9uZWN1dHRlcgpTdG9uZXdhbGwKU3Rvcm0KU3Ry
YW5nZXIKU3RyYXRvc2ZpcmUKU3Ryb2JlClN0cm9uZ2FybQpTdHJ5ZmUKU3R1bm5lcgpTdHVudG1h
c3RlcgpTdHlnb3JyClN0eWd5cm8KU3ViLU1hcmluZXIKU3VpY2lkZQpTdWx0YW4KU3VuZGVyClN1
bmRyYWdvbgpTdW5maXJlClN1bnB5cmUKU3Vuc3BvdApTdW5zdHJlYWsKU3Vuc3Ryb2tlClN1bnR1
cmlvbgpTdXBlci1BZGFwdG9pZApTdXBlcmNoYXJnZXIKU3VwZXJpYQpTdXBlci1Ob3ZhClN1cGVy
UHJvClN1cGVyLVNrcnVsbApTdXBlcm5hbGlhClN1cHJlbWEKU3VwcmVtb3IKU3VyZ2UKU3VydHVy
ClN1c2hpClN2YXJvZwpTd2FybQpTd2VldGZhY2UKU3dvcmRzbWFuClMneW0KU3luY2gKVGFnClRh
aWxob29rClRhbnRyYQpUYWxpc21hbgpUYXJhbnR1bGEKVGFyb3QKVGFydGFydXMKVGFza21hc3Rl
cgpUYXR0ZXJkZW1hbGlvbgpUYXR0bGV0YWxlClRhdHRvbwpUYXVydXMKVGVjaG5vClRlbXBlc3QK
VGVtcG8KVGVtcHVzClRlbXVnaW4KVGVucGluClRlcm1hZ2FpcmEKVGVybWluYXRvcgpUZXJtaW5h
dHJpeApUZXJtaW51cwpUZXJyYXhpYQpUZXJyb3IKVGVzcy1PbmUKVGVzc2EKVGV0aGVyClRldGhs
YW0KVGhha29zClRoYW5vcwpUaGVuYQpUaGVybW8KVGhpbmcKVGhpbmtlcgpUaGlydHktVGhyZWUK
VGhvZwpUaG9yClRob3JubgpUaHJlbm9keQpUaHVtYmVsaW5hClRodW5kZXJiYWxsClRodW5kZXJi
aXJkClRodW5kZXJib2x0ClRodW5kZXJjbGFwClRodW5kZXJmaXN0ClRodW5kZXJzdHJpa2UKVGh1
bmRyYQpUaWJvcm8KVGlncmEKVGltYmVyaXVzClRpbWVzaGFkb3cKVGltZXNsaXAKVGlua2VyZXIK
VGl0YW4KVGl0YW5pYQpUb2FkClRvYWQtSW4tV2FpdGluZwpUb21hem9vbWEKVG9tYnN0b25lClRv
bW15ClRvcGF6ClRvcHNwaW4KVG9ybwpUb3JwZWRvClRvcnJlbnQKVG9yc28KVG93ZXIKVG94aW4K
VHJhZGVyClRyYXBwZXIKVHJhcHN0ZXIKVC1SYXkKVHJlbW9sbwpUcmktTWFuClRyaWF0aGxvbgpU
cmlvY2N1bGEKVHJpdG9uClRyb2xsClRydW1wClR1Z3VuClR1YwpUdW1ibGVyClR1bmRyYQpUdXJh
YwpUdXJibwpUdXNrClR5cGVmYWNlClR5cGhvaWQKVHlwaG9uClR5cgpUeXJhawpUeXJhbm5vc2F1
cgpUeXJhbm51cwpUeXJhbnQKVHphYmFvdGgKVWF0dQpVbGlrClVsdGltbwpVbHRpbXVzClVsdHJh
LU1hcmluZQpVbHRyYWdpcmwKVWx0cm9uClVtYm8KVS1NYW4KVW1hcgpVbmljb3JuClVuaS1NaW5k
ClVuc2VlbgpVbnRoaW5uawpVbnVzY2lvbmUKVXJ0aG9uYQpVU0FnZW50ClVseXNzZXMKVXRnYXJk
LUxva2kKVmFnYWJvbmQKVmFndWUKVmFrdW1lClZhbGlub3IKVmFsa2luClZhbGt5cmllClZhbHRv
cnIKVmFtcApWYW5ndWFyZApWYW5pc2hlcgpWYXBvcgpWYXJnYXMKVmFybmFlClZhc2h0aQpWYXZh
dm9vbQpWZWN0b3IKVmVnYXMKVmVpbApWZW5nZWFuY2UKVmVub20KVmVub21tClZlbnVzClZlcml0
YXMKVmVybWluClZlcnRpZ28KVmVzdGEKVmlicmF4YXMKVmlicm8KVmljdG9yaXVzClZpZGFyClZp
bmNlbnRlClZpbmRhbG9vClZpbmRpY2F0b3IKVmlwZXIKVmlyYWtvClZpcmdvClZpc2hhbnRpClZp
c2ltYWpvcmlzClZpc2lvbgpWaXZpc2VjdG9yClZpeGVuClZvbGNhbmEKVm9sbGEKVm9scGFuClZv
bHN0YWdnClZ1bGNhbgpWdWx0dXJlCldhbGxmbG93ZXIKV2FyCldhcmJpcmQKV2FyaGF3awpXYXJs
b2NrCldhcnBhdGgKV2Fyc3RhcgpXYXJzdHJpa2UKV2Fyd29sdmVzCldhc2hvdXQKV2FzcApXYXRj
aGVyCldhdG9vbWIKV2VuZGlnbwpXaGlwbGFzaApXaGlybHdpbmQKV2hpc3RsZXIKV2hpdGVvdXQK
V2hpenplcgpXaWNjYW4KV2lja2VkCldpZGdldApXaWxkYm95cwpXaWxkcHJpZGUKV2lsZHNpZGUK
V2luZGVhZ2xlCldpbmRzaGVhcgpXaXRjaGZpcmUKV2l6YXJkCldvbGYKV29sZnNiYW5lCldvbHZl
cmluZQpXb25nCldvb2Rnb2QKV29ybQpXcmFpdGgKV3JhdGgKV3JlY2tlcgpXcmVja2FnZQpXeXNw
ZXIKWC0yMwpYLUN1dGlvbmVyClgtTWFuClgtVHJlbWUKWGFuZHUKWGF2aW4KWGVtdQpYb3JuClgt
UmF5ClknR2Fyb24KWWFuZHJvdGgKWWVsbG93amFja2V0CllldGkKWWl0aApZbWlyCllvbmR1Clly
aWFsCll1a2lvClphYnUKWmFjaApaYWxhZGFuZQpaYXJhdGhvcwpaYXJlawpaYXJ0cmEKWmVpdGdl
aXN0Clplcm8KWmVyby1HClpldXMKWmlwLVphcApab2RpYWsKWm9tClpvbWJpZQpadXJhcwpaenph
eAo='

if [ "$2" == "-a" -o "$2" == "--all" ]; then
	letternames=`echo -e "$list" | base64 -d | grep -i $"^$1"`
else
	letternames=`echo -e "$list" | base64 -d | grep -i $"^$1" | shuf | head -1`
fi
echo "$letternames"
